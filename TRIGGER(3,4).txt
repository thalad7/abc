3: write a trigger for Library (bid, bname, doi, status) to update the number of copies (noc) according to ISSUE & RETURN status on update or insert query. Increase the noc if status is RETURN, Decrease noc if status is ISSUE in Library_Audit table(bid,bname,noc,timestampofquery). Write a trigger after update on Library such that if doi is more than 20 days ago then status should be FINE and in the Library_Audit table fine should be equal to no. of days * 10.

-- Create tables
CREATE TABLE Library (
    bid INT PRIMARY KEY,
    bname VARCHAR(100),
    doi DATE,
    status VARCHAR(10),
    noc INT
);

CREATE TABLE Library_Audit (
    bid INT,
    bname VARCHAR(100),
    noc INT DEFAULT 0,      -- Change in copies (+1, -1 or 0)
    fine INT DEFAULT 0,
    timestampofquery DATETIME DEFAULT NOW()
);

-- Trigger BEFORE UPDATE to adjust status to FINE if doi > 20 days
DELIMITER //

CREATE TRIGGER trg_before_update_library
BEFORE UPDATE ON Library
FOR EACH ROW
BEGIN
    DECLARE days_diff INT;
    SET days_diff = DATEDIFF(CURDATE(), NEW.doi);

    IF days_diff > 20 THEN
        SET NEW.status = 'FINE';
    END IF;
END;
//

DELIMITER ;

-- Trigger AFTER INSERT to log noc changes and fines (if any)
DELIMITER //

CREATE TRIGGER trg_after_insert_library
AFTER INSERT ON Library
FOR EACH ROW
BEGIN
    DECLARE noc_change INT DEFAULT 0;

    IF NEW.status = 'ISSUE' THEN
        SET noc_change = -1;
    ELSEIF NEW.status = 'RETURN' THEN
        SET noc_change = 1;
    END IF;

    INSERT INTO Library_Audit (bid, bname, noc, fine, timestampofquery)
    VALUES (NEW.bid, NEW.bname, noc_change, 0, NOW());
END;
//

DELIMITER ;

-- Trigger AFTER UPDATE to log noc changes and fines (if any)
DELIMITER //

CREATE TRIGGER trg_after_update_library
AFTER UPDATE ON Library
FOR EACH ROW
BEGIN
    DECLARE noc_change INT DEFAULT 0;
    DECLARE days_diff INT;
    DECLARE fine_amt INT DEFAULT 0;

    IF NEW.status <> OLD.status THEN
        IF NEW.status = 'ISSUE' THEN
            SET noc_change = -1;
        ELSEIF NEW.status = 'RETURN' THEN
            SET noc_change = 1;
        END IF;

        INSERT INTO Library_Audit (bid, bname, noc, fine, timestampofquery)
        VALUES (NEW.bid, NEW.bname, noc_change, 0, NOW());
    END IF;

    SET days_diff = DATEDIFF(CURDATE(), NEW.doi);

    IF days_diff > 20 THEN
        SET fine_amt = days_diff * 10;

        INSERT INTO Library_Audit (bid, bname, noc, fine, timestampofquery)
        VALUES (NEW.bid, NEW.bname, 0, fine_amt, NOW());
    END IF;
END;
//

DELIMITER ;

-- Sample Inserts
INSERT INTO Library VALUES
(1, 'DBMS Concepts', '2025-04-01', 'ISSUE', 10),
(2, 'Data Structures', '2025-04-15', 'RETURN', 5),
(3, 'Operating Systems', '2025-03-20', 'ISSUE', 7),
(4, 'Networking', '2025-05-01', 'RETURN', 3);

-- Sample Updates to test triggers
UPDATE Library SET status = 'RETURN' WHERE bid = 1;
UPDATE Library SET status = 'ISSUE' WHERE bid = 2;

UPDATE Library SET doi = '2025-03-01' WHERE bid = 3;
UPDATE Library SET status = 'ISSUE' WHERE bid = 3;

-- Check tables
SELECT * FROM Library;
SELECT * FROM Library_Audit;

4: Write a database trigger on Library table. The System should keep track of the records that are being updated or deleted. The old value of updated or deleted records should be added in Library_Audit table. 




-- Create Library table (if not created)
CREATE TABLE IF NOT EXISTS Library (
    bid INT PRIMARY KEY,
    bname VARCHAR(100),
    doi DATE,
    status VARCHAR(10),
    noc INT
);

-- Create Library_Audit table to store old values
CREATE TABLE IF NOT EXISTS Library_Audit (
    bid INT,
    bname VARCHAR(100),
    doi DATE,
    status VARCHAR(10),
    noc INT,
    operation VARCHAR(10),        -- 'UPDATED' or 'DELETED'
    operation_time DATETIME DEFAULT NOW()
);

-- Trigger to track UPDATE operations
DELIMITER //

CREATE TRIGGER trg_before_update_library
BEFORE UPDATE ON Library
FOR EACH ROW
BEGIN
    -- Insert old record into audit table before update
    INSERT INTO Library_Audit (bid, bname, doi, status, noc, operation, operation_time)
    VALUES (OLD.bid, OLD.bname, OLD.doi, OLD.status, OLD.noc, 'UPDATED', NOW());
END;
//

DELIMITER ;

-- Trigger to track DELETE operations
DELIMITER //

CREATE TRIGGER trg_before_delete_library
BEFORE DELETE ON Library
FOR EACH ROW
BEGIN
    -- Insert old record into audit table before delete
    INSERT INTO Library_Audit (bid, bname, doi, status, noc, operation, operation_time)
    VALUES (OLD.bid, OLD.bname, OLD.doi, OLD.status, OLD.noc, 'DELETED', NOW());
END;
//

DELIMITER ;

-- Insert 4 sample records into Library
INSERT INTO Library VALUES (1, 'DBMS Concepts', '2025-04-01', 'ISSUE', 10);
INSERT INTO Library VALUES (2, 'Data Structures', '2025-04-05', 'RETURN', 5);
INSERT INTO Library VALUES (3, 'Operating Systems', '2025-03-01', 'ISSUE', 7);
INSERT INTO Library VALUES (4, 'Networking', '2025-02-10', 'RETURN', 3);

-- Update 1: Change status from ISSUE to RETURN for bid=1
UPDATE Library SET status = 'RETURN' WHERE bid = 1;

-- Update 2: Change status from RETURN to ISSUE for bid=2
UPDATE Library SET status = 'ISSUE' WHERE bid = 2;

-- Delete 1: Delete record with bid=4
DELETE FROM Library WHERE bid = 4;

-- View all audit logs to see history of changes
SELECT * FROM Library_Audit;
